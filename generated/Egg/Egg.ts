// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eggsAmt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eggsAmt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get tid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnStaked extends ethereum.Event {
  get params(): UnStaked__Params {
    return new UnStaked__Params(this);
  }
}

export class UnStaked__Params {
  _event: UnStaked;

  constructor(event: UnStaked) {
    this._event = event;
  }

  get tid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Egg__stakedChiknResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Egg extends ethereum.SmartContract {
  static bind(address: Address): Egg {
    return new Egg("Egg", address);
  }

  BASE_HOLDER_EGGS(): BigInt {
    let result = super.call(
      "BASE_HOLDER_EGGS",
      "BASE_HOLDER_EGGS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BASE_HOLDER_EGGS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASE_HOLDER_EGGS",
      "BASE_HOLDER_EGGS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CHIKN_CONTRACT(): Address {
    let result = super.call("CHIKN_CONTRACT", "CHIKN_CONTRACT():(address)", []);

    return result[0].toAddress();
  }

  try_CHIKN_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "CHIKN_CONTRACT",
      "CHIKN_CONTRACT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  COOLDOWN_BASE(): BigInt {
    let result = super.call("COOLDOWN_BASE", "COOLDOWN_BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_COOLDOWN_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COOLDOWN_BASE",
      "COOLDOWN_BASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  COOLDOWN_BASE_FACTOR(): BigInt {
    let result = super.call(
      "COOLDOWN_BASE_FACTOR",
      "COOLDOWN_BASE_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_COOLDOWN_BASE_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COOLDOWN_BASE_FACTOR",
      "COOLDOWN_BASE_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  COOLDOWN_CD_IN_SECS(): BigInt {
    let result = super.call(
      "COOLDOWN_CD_IN_SECS",
      "COOLDOWN_CD_IN_SECS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_COOLDOWN_CD_IN_SECS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COOLDOWN_CD_IN_SECS",
      "COOLDOWN_CD_IN_SECS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  COOLDOWN_RATE(): BigInt {
    let result = super.call("COOLDOWN_RATE", "COOLDOWN_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_COOLDOWN_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COOLDOWN_RATE",
      "COOLDOWN_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EGGS_PER_DAY_PER_KG(): BigInt {
    let result = super.call(
      "EGGS_PER_DAY_PER_KG",
      "EGGS_PER_DAY_PER_KG():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_EGGS_PER_DAY_PER_KG(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EGGS_PER_DAY_PER_KG",
      "EGGS_PER_DAY_PER_KG():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LEVELING_BASE(): BigInt {
    let result = super.call("LEVELING_BASE", "LEVELING_BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LEVELING_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LEVELING_BASE",
      "LEVELING_BASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LEVELING_RATE(): BigInt {
    let result = super.call("LEVELING_RATE", "LEVELING_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LEVELING_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LEVELING_RATE",
      "LEVELING_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authorized(param0: Address): boolean {
    let result = super.call("authorized", "authorized(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_authorized(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("authorized", "authorized(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkSkipCoolingOffAmt(kg: BigInt): BigInt {
    let result = super.call(
      "checkSkipCoolingOffAmt",
      "checkSkipCoolingOffAmt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(kg)]
    );

    return result[0].toBigInt();
  }

  try_checkSkipCoolingOffAmt(kg: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkSkipCoolingOffAmt",
      "checkSkipCoolingOffAmt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(kg)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableView(tokenId: BigInt): BigInt {
    let result = super.call(
      "claimableView",
      "claimableView(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_claimableView(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableView",
      "claimableView(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cooldownRate(kg: BigInt): BigInt {
    let result = super.call("cooldownRate", "cooldownRate(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(kg)
    ]);

    return result[0].toBigInt();
  }

  try_cooldownRate(kg: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cooldownRate",
      "cooldownRate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(kg)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feedLevelingRate(kg: BigInt): BigInt {
    let result = super.call(
      "feedLevelingRate",
      "feedLevelingRate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(kg)]
    );

    return result[0].toBigInt();
  }

  try_feedLevelingRate(kg: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feedLevelingRate",
      "feedLevelingRate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(kg)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  myClaimableView(): BigInt {
    let result = super.call(
      "myClaimableView",
      "myClaimableView():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_myClaimableView(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "myClaimableView",
      "myClaimableView():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  myStakedChikn(): Array<BigInt> {
    let result = super.call("myStakedChikn", "myStakedChikn():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_myStakedChikn(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "myStakedChikn",
      "myStakedChikn():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedChikn(param0: BigInt): Egg__stakedChiknResult {
    let result = super.call(
      "stakedChikn",
      "stakedChikn(uint256):(uint24,uint32,uint32,uint48,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Egg__stakedChiknResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_stakedChikn(param0: BigInt): ethereum.CallResult<Egg__stakedChiknResult> {
    let result = super.tryCall(
      "stakedChikn",
      "stakedChikn(uint256):(uint24,uint32,uint32,uint48,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Egg__stakedChiknResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalKg(): BigInt {
    let result = super.call("totalKg", "totalKg():(uint40)", []);

    return result[0].toBigInt();
  }

  try_totalKg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalKg", "totalKg():(uint40)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedChikn(): i32 {
    let result = super.call(
      "totalStakedChikn",
      "totalStakedChikn():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_totalStakedChikn(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "totalStakedChikn",
      "totalStakedChikn():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _chiknContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAuthorizedCall extends ethereum.Call {
  get inputs(): AddAuthorizedCall__Inputs {
    return new AddAuthorizedCall__Inputs(this);
  }

  get outputs(): AddAuthorizedCall__Outputs {
    return new AddAuthorizedCall__Outputs(this);
  }
}

export class AddAuthorizedCall__Inputs {
  _call: AddAuthorizedCall;

  constructor(call: AddAuthorizedCall) {
    this._call = call;
  }

  get _toAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAuthorizedCall__Outputs {
  _call: AddAuthorizedCall;

  constructor(call: AddAuthorizedCall) {
    this._call = call;
  }
}

export class AirdropToExistingHolderCall extends ethereum.Call {
  get inputs(): AirdropToExistingHolderCall__Inputs {
    return new AirdropToExistingHolderCall__Inputs(this);
  }

  get outputs(): AirdropToExistingHolderCall__Outputs {
    return new AirdropToExistingHolderCall__Outputs(this);
  }
}

export class AirdropToExistingHolderCall__Inputs {
  _call: AirdropToExistingHolderCall;

  constructor(call: AirdropToExistingHolderCall) {
    this._call = call;
  }

  get from(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOfEgg(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AirdropToExistingHolderCall__Outputs {
  _call: AirdropToExistingHolderCall;

  constructor(call: AirdropToExistingHolderCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnEggsCall extends ethereum.Call {
  get inputs(): BurnEggsCall__Inputs {
    return new BurnEggsCall__Inputs(this);
  }

  get outputs(): BurnEggsCall__Outputs {
    return new BurnEggsCall__Outputs(this);
  }
}

export class BurnEggsCall__Inputs {
  _call: BurnEggsCall;

  constructor(call: BurnEggsCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get eggsAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnEggsCall__Outputs {
  _call: BurnEggsCall;

  constructor(call: BurnEggsCall) {
    this._call = call;
  }
}

export class ClaimEggsCall extends ethereum.Call {
  get inputs(): ClaimEggsCall__Inputs {
    return new ClaimEggsCall__Inputs(this);
  }

  get outputs(): ClaimEggsCall__Outputs {
    return new ClaimEggsCall__Outputs(this);
  }
}

export class ClaimEggsCall__Inputs {
  _call: ClaimEggsCall;

  constructor(call: ClaimEggsCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimEggsCall__Outputs {
  _call: ClaimEggsCall;

  constructor(call: ClaimEggsCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FeedChiknCall extends ethereum.Call {
  get inputs(): FeedChiknCall__Inputs {
    return new FeedChiknCall__Inputs(this);
  }

  get outputs(): FeedChiknCall__Outputs {
    return new FeedChiknCall__Outputs(this);
  }
}

export class FeedChiknCall__Inputs {
  _call: FeedChiknCall;

  constructor(call: FeedChiknCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feedAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FeedChiknCall__Outputs {
  _call: FeedChiknCall;

  constructor(call: FeedChiknCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LevelUpChiknCall extends ethereum.Call {
  get inputs(): LevelUpChiknCall__Inputs {
    return new LevelUpChiknCall__Inputs(this);
  }

  get outputs(): LevelUpChiknCall__Outputs {
    return new LevelUpChiknCall__Outputs(this);
  }
}

export class LevelUpChiknCall__Inputs {
  _call: LevelUpChiknCall;

  constructor(call: LevelUpChiknCall) {
    this._call = call;
  }

  get tid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LevelUpChiknCall__Outputs {
  _call: LevelUpChiknCall;

  constructor(call: LevelUpChiknCall) {
    this._call = call;
  }
}

export class MintEggCall extends ethereum.Call {
  get inputs(): MintEggCall__Inputs {
    return new MintEggCall__Inputs(this);
  }

  get outputs(): MintEggCall__Outputs {
    return new MintEggCall__Outputs(this);
  }
}

export class MintEggCall__Inputs {
  _call: MintEggCall;

  constructor(call: MintEggCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintEggCall__Outputs {
  _call: MintEggCall;

  constructor(call: MintEggCall) {
    this._call = call;
  }
}

export class RebalanceEggClaimableToUserWalletCall extends ethereum.Call {
  get inputs(): RebalanceEggClaimableToUserWalletCall__Inputs {
    return new RebalanceEggClaimableToUserWalletCall__Inputs(this);
  }

  get outputs(): RebalanceEggClaimableToUserWalletCall__Outputs {
    return new RebalanceEggClaimableToUserWalletCall__Outputs(this);
  }
}

export class RebalanceEggClaimableToUserWalletCall__Inputs {
  _call: RebalanceEggClaimableToUserWalletCall;

  constructor(call: RebalanceEggClaimableToUserWalletCall) {
    this._call = call;
  }

  get from(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RebalanceEggClaimableToUserWalletCall__Outputs {
  _call: RebalanceEggClaimableToUserWalletCall;

  constructor(call: RebalanceEggClaimableToUserWalletCall) {
    this._call = call;
  }
}

export class RemoveAuthorizedCall extends ethereum.Call {
  get inputs(): RemoveAuthorizedCall__Inputs {
    return new RemoveAuthorizedCall__Inputs(this);
  }

  get outputs(): RemoveAuthorizedCall__Outputs {
    return new RemoveAuthorizedCall__Outputs(this);
  }
}

export class RemoveAuthorizedCall__Inputs {
  _call: RemoveAuthorizedCall;

  constructor(call: RemoveAuthorizedCall) {
    this._call = call;
  }

  get _toRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAuthorizedCall__Outputs {
  _call: RemoveAuthorizedCall;

  constructor(call: RemoveAuthorizedCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SkipCoolingOffCall extends ethereum.Call {
  get inputs(): SkipCoolingOffCall__Inputs {
    return new SkipCoolingOffCall__Inputs(this);
  }

  get outputs(): SkipCoolingOffCall__Outputs {
    return new SkipCoolingOffCall__Outputs(this);
  }
}

export class SkipCoolingOffCall__Inputs {
  _call: SkipCoolingOffCall;

  constructor(call: SkipCoolingOffCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get eggAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SkipCoolingOffCall__Outputs {
  _call: SkipCoolingOffCall;

  constructor(call: SkipCoolingOffCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get tids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get tids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpdateSkipCooldownValuesCall extends ethereum.Call {
  get inputs(): UpdateSkipCooldownValuesCall__Inputs {
    return new UpdateSkipCooldownValuesCall__Inputs(this);
  }

  get outputs(): UpdateSkipCooldownValuesCall__Outputs {
    return new UpdateSkipCooldownValuesCall__Outputs(this);
  }
}

export class UpdateSkipCooldownValuesCall__Inputs {
  _call: UpdateSkipCooldownValuesCall;

  constructor(call: UpdateSkipCooldownValuesCall) {
    this._call = call;
  }

  get a(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get b(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get c(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get d(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get e(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateSkipCooldownValuesCall__Outputs {
  _call: UpdateSkipCooldownValuesCall;

  constructor(call: UpdateSkipCooldownValuesCall) {
    this._call = call;
  }
}

export class WithdrawAllChiknAndClaimCall extends ethereum.Call {
  get inputs(): WithdrawAllChiknAndClaimCall__Inputs {
    return new WithdrawAllChiknAndClaimCall__Inputs(this);
  }

  get outputs(): WithdrawAllChiknAndClaimCall__Outputs {
    return new WithdrawAllChiknAndClaimCall__Outputs(this);
  }
}

export class WithdrawAllChiknAndClaimCall__Inputs {
  _call: WithdrawAllChiknAndClaimCall;

  constructor(call: WithdrawAllChiknAndClaimCall) {
    this._call = call;
  }

  get tids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class WithdrawAllChiknAndClaimCall__Outputs {
  _call: WithdrawAllChiknAndClaimCall;

  constructor(call: WithdrawAllChiknAndClaimCall) {
    this._call = call;
  }
}
