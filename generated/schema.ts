// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Chikn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("head", Value.fromString(""));
    this.set("neck", Value.fromString(""));
    this.set("torso", Value.fromString(""));
    this.set("feet", Value.fromString(""));
    this.set("tail", Value.fromString(""));
    this.set("body", Value.fromString(""));
    this.set("trim", Value.fromString(""));
    this.set("background", Value.fromString(""));
    this.set("rarity", Value.fromString(""));
    this.set("kg", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Chikn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Chikn entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Chikn", id.toString(), this);
    }
  }

  static load(id: string): Chikn | null {
    return changetype<Chikn | null>(store.get("Chikn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contentURI(): string | null {
    let value = this.get("contentURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contentURI(value: string | null) {
    if (!value) {
      this.unset("contentURI");
    } else {
      this.set("contentURI", Value.fromString(<string>value));
    }
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get lastSalePrice(): BigInt | null {
    let value = this.get("lastSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastSalePrice(value: BigInt | null) {
    if (!value) {
      this.unset("lastSalePrice");
    } else {
      this.set("lastSalePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }

  get head(): string {
    let value = this.get("head");
    return value!.toString();
  }

  set head(value: string) {
    this.set("head", Value.fromString(value));
  }

  get neck(): string {
    let value = this.get("neck");
    return value!.toString();
  }

  set neck(value: string) {
    this.set("neck", Value.fromString(value));
  }

  get torso(): string {
    let value = this.get("torso");
    return value!.toString();
  }

  set torso(value: string) {
    this.set("torso", Value.fromString(value));
  }

  get feet(): string {
    let value = this.get("feet");
    return value!.toString();
  }

  set feet(value: string) {
    this.set("feet", Value.fromString(value));
  }

  get tail(): string {
    let value = this.get("tail");
    return value!.toString();
  }

  set tail(value: string) {
    this.set("tail", Value.fromString(value));
  }

  get body(): string {
    let value = this.get("body");
    return value!.toString();
  }

  set body(value: string) {
    this.set("body", Value.fromString(value));
  }

  get trim(): string {
    let value = this.get("trim");
    return value!.toString();
  }

  set trim(value: string) {
    this.set("trim", Value.fromString(value));
  }

  get background(): string {
    let value = this.get("background");
    return value!.toString();
  }

  set background(value: string) {
    this.set("background", Value.fromString(value));
  }

  get numberOfTraits(): i32 {
    let value = this.get("numberOfTraits");
    return value!.toI32();
  }

  set numberOfTraits(value: i32) {
    this.set("numberOfTraits", Value.fromI32(value));
  }

  get rank(): i32 {
    let value = this.get("rank");
    return value!.toI32();
  }

  set rank(value: i32) {
    this.set("rank", Value.fromI32(value));
  }

  get rarity(): string {
    let value = this.get("rarity");
    return value!.toString();
  }

  set rarity(value: string) {
    this.set("rarity", Value.fromString(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get forSale(): boolean {
    let value = this.get("forSale");
    return value!.toBoolean();
  }

  set forSale(value: boolean) {
    this.set("forSale", Value.fromBoolean(value));
  }

  get kg(): BigInt {
    let value = this.get("kg");
    return value!.toBigInt();
  }

  set kg(value: BigInt) {
    this.set("kg", Value.fromBigInt(value));
  }

  get numEggsStaked(): BigInt | null {
    let value = this.get("numEggsStaked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numEggsStaked(value: BigInt | null) {
    if (!value) {
      this.unset("numEggsStaked");
    } else {
      this.set("numEggsStaked", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastClaimedEgg(): BigInt | null {
    let value = this.get("lastClaimedEgg");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastClaimedEgg(value: BigInt | null) {
    if (!value) {
      this.unset("lastClaimedEgg");
    } else {
      this.set("lastClaimedEgg", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastClaimedFeed(): BigInt | null {
    let value = this.get("lastClaimedFeed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastClaimedFeed(value: BigInt | null) {
    if (!value) {
      this.unset("lastClaimedFeed");
    } else {
      this.set("lastClaimedFeed", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("chikn", Value.fromString(""));
    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chikn(): string {
    let value = this.get("chikn");
    return value!.toString();
  }

  set chikn(value: string) {
    this.set("chikn", Value.fromString(value));
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(<string>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("chikns", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chikns(): Array<string> {
    let value = this.get("chikns");
    return value!.toStringArray();
  }

  set chikns(value: Array<string>) {
    this.set("chikns", Value.fromStringArray(value));
  }
}
